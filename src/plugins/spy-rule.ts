import type { SpyConfigRuleEntity } from '@/entities';
import type { Rule, RuleConfig } from './rule.schema';

/**
 * Spec
 * 
 *     - Expression syntax for `**response_transformer**`
        1. `<action> = <value>`, the value is JSON-compatibility data
        2. `<action> = <key> : <value>`, the value is JSON-compatibility data
        3. Multiple expressionâ‡’ 
            1. Ex:  `<action> = <value> , <action> = <value>`
            2. Ex: `<action> = <value> , <action> = <key> : <value>`
    - Allow Actions
        - replace.status_code
            - `replace.status_code=400`
 */

export class SpyRule {
  public errorMessages: string[] = [];
  public rules: Record<string, Rule> = {};
  public actionExpressions: string[] = [];

  constructor(public readonly spyConfigRules: SpyConfigRuleEntity[]) {}

  parse(): RuleConfig {
    for (const spyConfigRule of this.spyConfigRules) {
      const ruleId = this.generateRuleId(spyConfigRule);
      if (this.rules[ruleId]) {
        this.errorMessages.push(`Duplicate rule found for ${ruleId}, payload: ${JSON.stringify(spyConfigRule)}`);
        continue;
      }
      this.rules[ruleId] = {
        ruleName: spyConfigRule.ruleName,
        path: spyConfigRule.path,
        method: spyConfigRule.method ?? undefined,
        plugin: spyConfigRule.plugin,
        actionExpressions: this.parseActionExpressions(spyConfigRule.data),
        condition: spyConfigRule.condition,
      };
    }

    return {
      rules: this.rules,
      errorMessages: this.errorMessages,
    };
  }

  /**
   * The rule id is generated by the following format:
   * `plugin`-`path`-`method`
   */
  generateRuleId(rule: SpyConfigRuleEntity): string {
    return [rule.plugin, rule.path, rule.method].join('-');
  }

  parseActionExpressions(data: string): Rule['actionExpressions'] {
    const actionExpressions: Rule['actionExpressions'] = [];
    const rawExpressions = data.split(',').map(actionExpression => actionExpression.trim());
    for (const rawExpression of rawExpressions) {
      const [action, param] = rawExpression.split('=');


      actionExpressions.push({
        action: action.trim(),
        param: param.trim(),
      });
    }
    return actionExpressions;
  }
}
